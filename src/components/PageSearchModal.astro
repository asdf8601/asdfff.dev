<div id="page-search-modal" class="modal">
  <div class="modal-content">
    <input type="text" id="page-search-input" placeholder="search in page..." />
    <div id="page-search-results"></div>
  </div>
</div>

<style>
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: var(--z-index-modal);
    justify-content: center;
    align-items: center;
  }

  .modal.active {
    display: flex;
  }

  .modal-content {
    background-color: var(--color-bg);
    border: var(--border-width) solid var(--color-accent);
    padding: var(--spacing-md);
    max-width: var(--modal-width);
    width: var(--modal-width-percent);
    max-height: var(--modal-height);
    display: flex;
    flex-direction: column;
    clip-path: var(--clip-path-angled);
  }

  #page-search-input {
    font-family: var(--font-mono);
    font-size: 1rem;
    padding: var(--spacing-sm);
    background-color: var(--color-bg);
    color: var(--color-text);
    border: 1px solid var(--color-border);
    margin-bottom: var(--spacing-md);
    clip-path: var(--clip-path-angled);
  }

  #page-search-input:focus {
    outline: none;
    border-color: var(--color-accent);
  }

  #page-search-results {
    overflow-y: auto;
    display: flex;
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .search-result {
    padding: var(--spacing-sm);
    cursor: pointer;
    border-left: var(--border-width) solid transparent;
  }

  .search-result:hover {
    border-left-color: var(--color-accent);
  }

  .search-result.selected-item {
    background-color: var(--color-bg-secondary);
    border-left-color: var(--color-accent);
  }

  .search-result-text {
    font-size: 0.9rem;
  }

  .search-highlight {
    background-color: var(--color-accent);
    color: var(--color-bg);
    padding: 0 2px;
  }
</style>

<script>
  interface SearchMatch {
    element: Element;
    text: string;
    index: number;
  }

  let pageSearchActive = false;
  let searchMatches: SearchMatch[] = [];
  let searchSelectedIndex = -1;

  const pageSearchModal = document.getElementById('page-search-modal');
  const pageSearchInput = document.getElementById('page-search-input') as HTMLInputElement;
  const pageSearchResults = document.getElementById('page-search-results');

  function searchInPage(query: string) {
    searchMatches = [];
    if (!query) {
      renderPageSearchResults();
      return;
    }

    const article = document.querySelector('article');
    if (!article) return;

    const walker = document.createTreeWalker(
      article,
      NodeFilter.SHOW_TEXT,
      {
        acceptNode: (node) => {
          if (node.parentElement?.tagName === 'SCRIPT' ||
              node.parentElement?.tagName === 'STYLE') {
            return NodeFilter.FILTER_REJECT;
          }
          return NodeFilter.FILTER_ACCEPT;
        }
      }
    );

    let node;
    while ((node = walker.nextNode())) {
      const text = node.textContent || '';
      const lowerText = text.toLowerCase();
      const lowerQuery = query.toLowerCase();

      let index = 0;
      let position;
      while ((position = lowerText.indexOf(lowerQuery, index)) !== -1) {
        searchMatches.push({
          element: node.parentElement as Element,
          text: text,
          index: position
        });
        index = position + 1;
      }
    }

    renderPageSearchResults();
  }

  function renderPageSearchResults() {
    if (!pageSearchResults) return;

    pageSearchResults.innerHTML = '';

    if (searchMatches.length === 0) {
      pageSearchResults.innerHTML = '<div style="padding: var(--spacing-sm); color: var(--color-text-muted);">No matches found</div>';
      return;
    }

    searchMatches.forEach((match, index) => {
      const div = document.createElement('div');
      div.className = 'search-result';
      if (index === searchSelectedIndex) {
        div.classList.add('selected-item');
      }

      const start = Math.max(0, match.index - 40);
      const end = Math.min(match.text.length, match.index + (pageSearchInput?.value.length || 0) + 40);
      const before = match.text.slice(start, match.index);
      const matchText = match.text.slice(match.index, match.index + (pageSearchInput?.value.length || 0));
      const after = match.text.slice(match.index + (pageSearchInput?.value.length || 0), end);

      div.innerHTML = `
        <div class="search-result-text">
          ${start > 0 ? '...' : ''}${before}<span class="search-highlight">${matchText}</span>${after}${end < match.text.length ? '...' : ''}
        </div>
      `;

      div.addEventListener('click', () => {
        match.element.scrollIntoView({ block: 'center', behavior: 'smooth' });
        closePageSearch();
      });

      pageSearchResults.appendChild(div);
    });
  }

  function updatePageSearchSelection() {
    const resultElements = pageSearchResults?.querySelectorAll('.search-result');
    resultElements?.forEach((el, index) => {
      if (index === searchSelectedIndex) {
        el.classList.add('selected-item');
        el.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      } else {
        el.classList.remove('selected-item');
      }
    });
  }

  function openPageSearch() {
    pageSearchActive = true;
    pageSearchModal?.classList.add('active');
    pageSearchInput?.focus();
    searchSelectedIndex = 0;
    searchInPage('');
  }

  function closePageSearch() {
    pageSearchActive = false;
    pageSearchModal?.classList.remove('active');
    if (pageSearchInput) pageSearchInput.value = '';
    searchSelectedIndex = -1;
    searchMatches = [];
  }

  pageSearchInput?.addEventListener('input', () => {
    searchSelectedIndex = 0;
    searchInPage(pageSearchInput.value);
  });

  document.addEventListener('keydown', (e) => {
    if (pageSearchActive) {
      if (e.key === 'Escape') {
        e.preventDefault();
        closePageSearch();
      }
    }
  });

  (window as any).pageSearchHandlers = {
    openPageSearch,
    closePageSearch,
    isPageSearchActive: () => pageSearchActive
  };
</script>
