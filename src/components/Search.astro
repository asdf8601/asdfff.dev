<div class="search-container">
  <div class="input-wrapper">
    <input 
      type="search" 
      id="search-input" 
      placeholder="search..." 
      aria-label="Search"
    />
    <span class="custom-cursor" id="custom-cursor">â–ˆ</span>
  </div>
  <div id="search-results" class="search-results" hidden></div>
</div>

<style>
  .search-container {
    position: relative;
    flex: 1;
    max-width: 300px;
  }

  .input-wrapper {
    position: relative;
  }

  #search-input {
    width: 100%;
    background-color: var(--color-bg);
    border: 1px solid var(--color-border);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    padding: 0.4rem 0.8rem;
    outline: none;
    caret-color: transparent;
  }

  .custom-cursor {
    position: absolute;
    color: var(--color-accent);
    font-family: var(--font-mono);
    font-size: 0.9rem;
    pointer-events: none;
    animation: blink 1s step-end infinite;
    left: 0.8rem;
    top: 0.4rem;
  }

  @keyframes blink {
    0%, 49% {
      opacity: 1;
    }
    50%, 100% {
      opacity: 0;
    }
  }

  #search-input:focus {
    border-color: var(--color-accent);
  }

  #search-input::placeholder {
    color: var(--color-text-muted);
  }

  .search-results {
    position: absolute;
    top: calc(100% + 0.5rem);
    left: 0;
    right: 0;
    background-color: var(--color-bg);
    border: 1px solid var(--color-accent);
    max-height: 400px;
    overflow-y: auto;
    z-index: 100;
  }

  .search-results[hidden] {
    display: none;
  }

  .search-result-item {
    padding: var(--spacing-sm);
    border-bottom: 1px solid var(--color-border);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background-color: rgba(0, 255, 0, 0.05);
  }

  .search-result-item a {
    text-decoration: none;
    display: block;
  }

  .search-result-title {
    color: var(--color-accent);
    margin-bottom: 0.25rem;
  }

  .search-result-excerpt {
    font-size: 0.85rem;
    color: var(--color-text-muted);
  }

  .search-no-results {
    padding: var(--spacing-sm);
    color: var(--color-text-muted);
    text-align: center;
  }
</style>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchResults = document.getElementById('search-results') as HTMLDivElement;
  const customCursor = document.getElementById('custom-cursor') as HTMLSpanElement;
  const base = import.meta.env.BASE_URL;

  interface PageData {
    url: string;
    title: string;
    content: string;
  }

  let pagesData: PageData[] = [];

  function updateCursorPosition() {
    if (!searchInput || !customCursor) return;
    
    const value = searchInput.value;
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    if (ctx) {
      ctx.font = getComputedStyle(searchInput).font;
      const textWidth = ctx.measureText(value).width;
      customCursor.style.left = `${0.8 + textWidth / 16}rem`;
    }

    if (value) {
      customCursor.style.display = 'none';
    } else {
      customCursor.style.display = 'block';
    }
  }

  searchInput?.addEventListener('input', updateCursorPosition);
  searchInput?.addEventListener('focus', () => {
    if (customCursor) customCursor.style.display = searchInput.value ? 'none' : 'block';
  });
  searchInput?.addEventListener('blur', () => {
    if (customCursor) customCursor.style.display = 'none';
  });

  async function loadPagesData() {
    try {
      const response = await fetch(`${base}/search-data.json`);
      pagesData = await response.json();
    } catch (error) {
      console.error('Failed to load search data:', error);
    }
  }

  function search(query: string): PageData[] {
    if (!query || query.length < 2) return [];
    
    const lowerQuery = query.toLowerCase();
    return pagesData
      .filter(page => 
        page.title.toLowerCase().includes(lowerQuery) ||
        page.content.toLowerCase().includes(lowerQuery)
      )
      .slice(0, 5);
  }

  function getExcerpt(content: string, query: string): string {
    const lowerContent = content.toLowerCase();
    const lowerQuery = query.toLowerCase();
    const index = lowerContent.indexOf(lowerQuery);
    
    if (index === -1) return content.slice(0, 100) + '...';
    
    const start = Math.max(0, index - 50);
    const end = Math.min(content.length, index + query.length + 50);
    
    let excerpt = content.slice(start, end);
    if (start > 0) excerpt = '...' + excerpt;
    if (end < content.length) excerpt = excerpt + '...';
    
    return excerpt;
  }

  function displayResults(results: PageData[], query: string) {
    if (results.length === 0) {
      searchResults.innerHTML = '<div class="search-no-results">no results found</div>';
      searchResults.hidden = false;
      return;
    }

    searchResults.innerHTML = results
      .map(page => `
        <div class="search-result-item">
          <a href="${base}/${page.url.startsWith('/') ? page.url.slice(1) : page.url}">
            <div class="search-result-title">${page.title}</div>
            <div class="search-result-excerpt">${getExcerpt(page.content, query)}</div>
          </a>
        </div>
      `)
      .join('');
    
    searchResults.hidden = false;
  }

  searchInput?.addEventListener('input', (e) => {
    const query = (e.target as HTMLInputElement).value;
    
    if (!query || query.length < 2) {
      searchResults.hidden = true;
      return;
    }

    const results = search(query);
    displayResults(results, query);
  });

  document.addEventListener('click', (e) => {
    if (!searchInput?.contains(e.target as Node) && !searchResults?.contains(e.target as Node)) {
      searchResults.hidden = true;
    }
  });

  loadPagesData();
</script>
