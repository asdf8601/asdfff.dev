---
import BaseLayout from "../layouts/BaseLayout.astro"
import PageSearchModal from "../components/PageSearchModal.astro"

const quoteModules = import.meta.glob("./quotes/*.md", { eager: true })
const quotes = Object.values(quoteModules)

const sortedQuotes = quotes.sort((a, b) => {
  const dateA = new Date(a.frontmatter.date || 0)
  const dateB = new Date(b.frontmatter.date || 0)
  return dateB.getTime() - dateA.getTime()
})
---

<BaseLayout title="quotes - wtfm">
  <article>
    <h1>quotes</h1>

    <p>Words worth keeping. A curated collection of literary wisdom.</p>

    {
      sortedQuotes.length > 0 ? (
        sortedQuotes.map((quote, index) => {
          const quoteNumber = sortedQuotes.length - index
          const date = new Date(quote.frontmatter.date)
          const formattedDate = date.toLocaleDateString("en-US", {
            year: "numeric",
            month: "short",
            day: "numeric",
          })
          return (
            <div class="quote-entry" id={`quote-${quoteNumber}`}>
              <div class="quote-header">
                <div class="quote-number-date">
                  <span class="quote-number">#{quoteNumber}</span>
                  <time>{formattedDate}</time>
                </div>
                <a
                  href={`#quote-${quoteNumber}`}
                  class="quote-link"
                  aria-label="Link to this quote"
                >
                  <i class="fa-solid fa-link" />
                </a>
              </div>
              <div class="quote-content">
                <blockquote>
                  <quote.Content />
                </blockquote>
                {quote.frontmatter.author && (
                  <cite class="quote-author">â€” {quote.frontmatter.author}</cite>
                )}
                {quote.frontmatter.source && (
                  <span class="quote-source">{quote.frontmatter.source}</span>
                )}
              </div>
            </div>
          )
        })
      ) : (
        <p class="empty-state">No quotes yet. Add markdown files to src/pages/quotes/</p>
      )
    }
  </article>

  <PageSearchModal />
</BaseLayout>

<style>
  h1 {
    margin-bottom: var(--spacing-md);
    text-transform: lowercase;
  }

  .quote-entry {
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-sm);
    background-color: var(--color-til-bg);
    scroll-margin-top: var(--spacing-md);
    transition: all 0.2s ease;
    position: relative;
    border: 1px solid var(--color-border);
    clip-path: var(--clip-path-angled);
  }

  .quote-entry::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--angled-corner);
    background-color: var(--color-border);
    transition: background-color 0.2s ease;
    z-index: 0;
  }

  .quote-entry::after {
    content: "";
    position: absolute;
    left: var(--angled-corner);
    bottom: 0;
    right: 0;
    height: var(--angled-corner);
    background-color: var(--color-border);
    transition: background-color 0.2s ease;
    z-index: 0;
  }

  .quote-header,
  .quote-content {
    position: relative;
    z-index: 1;
  }

  .quote-entry:target::before,
  .quote-entry:target::after {
    background-color: var(--color-accent);
  }

  .quote-entry:target {
    background-color: var(--color-til-hover);
    border-color: var(--color-accent);
  }

  .quote-entry:hover {
    background-color: var(--color-til-hover);
    border-color: var(--color-accent);
  }

  .quote-entry:hover::before,
  .quote-entry:hover::after {
    background-color: var(--color-accent);
  }

  .quote-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-xs);
  }

  .quote-content {
    margin-bottom: 0;
  }

  .quote-number-date {
    display: flex;
    gap: var(--spacing-xs);
    align-items: center;
  }

  .quote-number {
    color: var(--color-accent);
    font-size: 0.85rem;
    font-weight: 600;
  }

  blockquote {
    margin: 0 0 var(--spacing-sm) 0;
    padding: 0;
    border: none;
    font-style: italic;
    font-size: 1.1rem;
    line-height: 1.6;
  }

  .quote-author {
    display: block;
    font-style: normal;
    color: var(--color-accent);
    margin-bottom: var(--spacing-xs);
  }

  .quote-source {
    display: block;
    font-size: 0.85rem;
    color: var(--color-text-muted);
    font-style: italic;
  }

  .quote-entry time {
    color: var(--color-text-muted);
    font-size: 0.85rem;
  }

  .quote-link {
    opacity: 0;
    transition: opacity 0.2s;
    font-size: 0.85rem;
    padding: 0 0.5rem;
  }

  .quote-entry:hover .quote-link,
  .quote-link:focus {
    opacity: 1;
  }

  .quote-entry p {
    margin-bottom: 0;
  }
</style>

<script>
  const { openPageSearch, closePageSearch, isPageSearchActive } = (window as any).pageSearchHandlers

  document.addEventListener("DOMContentLoaded", () => {
    const quoteLinks = document.querySelectorAll(".quote-link")

    quoteLinks.forEach(link => {
      link.addEventListener("click", async e => {
        e.preventDefault()
        const href = link.getAttribute("href")

        if (href) {
          const fullUrl = window.location.origin + window.location.pathname + href

          try {
            await navigator.clipboard.writeText(fullUrl)
            ;(window as any).showNotification?.("link copied")
          } catch (err) {
            console.error("Failed to copy link:", err)
          }
        }
      })
    })

    const quoteEntries = Array.from(document.querySelectorAll(".quote-entry"))
    let selectedIndex = -1

    function selectItem(index: number) {
      quoteEntries.forEach(entry => entry.classList.remove("selected-item"))
      if (index >= 0 && index < quoteEntries.length) {
        selectedIndex = index
        quoteEntries[selectedIndex].classList.add("selected-item")
        quoteEntries[selectedIndex].scrollIntoView({ behavior: "smooth", block: "center" })
      }
    }

    document.addEventListener("keydown", e => {
      const target = e.target as HTMLElement

      if (isPageSearchActive()) {
        return
      }

      if (target.tagName === "INPUT" || target.tagName === "TEXTAREA") {
        return
      }

      if (e.key === "k" && (e.ctrlKey || e.metaKey)) {
        return
      }

      if (e.key === "/") {
        e.preventDefault()
        openPageSearch()
        return
      }

      if (e.key === "j") {
        e.preventDefault()
        selectItem(selectedIndex + 1)
      } else if (e.key === "k") {
        e.preventDefault()
        if (selectedIndex > 0) {
          selectItem(selectedIndex - 1)
        }
      } else if (e.key === "Enter" && selectedIndex >= 0) {
        e.preventDefault()
        const link = quoteEntries[selectedIndex].querySelector(".quote-link") as HTMLAnchorElement
        if (link) {
          link.click()
        }
      }
    })
  })
</script>
