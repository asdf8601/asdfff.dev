---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="editor - wtfm">
  <article>
    <div id="mobile-warning" class="mobile-warning" hidden>
      <h1>vim editor</h1>
      <p>this editor requires a desktop browser with a physical keyboard.</p>
      <p>vim keybindings need proper keyboard input to work correctly.</p>
      <p>please visit this page from a computer to use the editor.</p>
    </div>

    <div id="editor-wrapper">
      <div class="editor-header">
        <h1>vim editor</h1>
        <div class="editor-controls">
          <button id="save-btn" title="Save to localStorage (or :w)">save</button>
          <button id="load-btn" title="Load from localStorage">load</button>
          <button id="clear-btn" title="Clear editor">clear</button>
          <button id="copy-btn" title="Copy to clipboard (or yG)">copy</button>
          <button id="settings-btn" title="Toggle settings">settings</button>
        </div>
      </div>

    <div id="settings-panel" class="settings-panel" hidden>
      <h3>settings</h3>
      <div class="setting-group">
        <label for="tab-size">tab size:</label>
        <input type="number" id="tab-size" min="2" max="8" value="2" />
      </div>
      <div class="setting-group">
        <label for="line-numbers">line numbers:</label>
        <input type="checkbox" id="line-numbers" checked />
      </div>
      <div class="setting-group">
        <label for="syntax-lang">syntax:</label>
        <select id="syntax-lang">
          <option value="none">none</option>
          <option value="markdown">markdown</option>
          <option value="javascript">javascript</option>
          <option value="python">python</option>
        </select>
      </div>
    </div>

    <div id="editor-container"></div>

    <div class="editor-footer">
      <div class="vim-status">
        <span id="vim-mode">NORMAL</span>
        <span id="vim-command"></span>
      </div>
      <div class="editor-info">
        <span id="cursor-pos">1:1</span>
      </div>
    </div>
    </div>
  </article>
</BaseLayout>

<style>
  article {
    max-width: var(--max-width);
    padding: 0;
    margin-top: 2rem;
  }

  .editor-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-sm);
    border-bottom: 1px solid var(--color-border);
  }

  .editor-header h1 {
    margin: 0;
    font-size: 1.2rem;
    text-transform: lowercase;
  }

  .editor-controls {
    display: flex;
    gap: 0.5rem;
  }

  .editor-controls button {
    background-color: var(--color-bg);
    color: var(--color-text);
    border: 1px solid #333;
    padding: 0.4rem 0.7rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
    cursor: pointer;
    transition: all 0.2s;
    border-radius: 4px;
  }

  .editor-controls button:hover {
    border-color: var(--color-accent);
    color: var(--color-accent);
  }

  .settings-panel {
    padding: var(--spacing-sm);
    background-color: var(--color-til-bg);
    border-bottom: 1px solid var(--color-border);
  }

  .settings-panel h3 {
    margin: 0 0 var(--spacing-sm) 0;
    font-size: 1rem;
    text-transform: lowercase;
  }

  .setting-group {
    display: flex;
    align-items: center;
    gap: var(--spacing-sm);
    margin-bottom: var(--spacing-xs);
  }

  .setting-group label {
    min-width: 120px;
    font-size: 0.9rem;
  }

  .setting-group input[type="number"],
  .setting-group select {
    background-color: var(--color-bg);
    color: var(--color-text);
    border: 1px solid var(--color-border);
    padding: 0.3rem 0.5rem;
    font-family: var(--font-mono);
    font-size: 0.85rem;
  }

  .setting-group input[type="checkbox"] {
    width: 1rem;
    height: 1rem;
  }

  #editor-container {
    height: calc((100vh - 250px) * 0.9);
    min-height: 360px;
    overflow: auto;
  }

  .editor-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: var(--spacing-xs) var(--spacing-sm);
    border-top: 1px solid var(--color-border);
    font-size: 0.85rem;
    background-color: var(--color-til-bg);
    margin-top: 2rem;
  }

  .vim-status {
    display: flex;
    gap: var(--spacing-sm);
  }

  #vim-mode {
    color: var(--color-accent);
    font-weight: 600;
  }

  #vim-command {
    color: var(--color-text-muted);
  }

  .editor-info {
    color: var(--color-text-muted);
  }

  .mobile-warning {
    padding: var(--spacing-lg);
    text-align: center;
  }

  .mobile-warning h1 {
    margin-bottom: var(--spacing-md);
    border: none;
    padding: 0;
  }

  .mobile-warning p {
    margin-bottom: var(--spacing-sm);
    color: var(--color-text-muted);
    font-size: 0.95rem;
  }

  @media (max-width: 768px) {
    .editor-controls {
      flex-wrap: wrap;
    }

    .editor-controls button {
      font-size: 0.75rem;
      padding: 0.3rem 0.6rem;
    }
  }

  :global(.cm-editor) {
    height: 100%;
    background-color: var(--color-pre-bg);
    color: var(--color-text);
    font-family: var(--font-mono);
    font-size: 1rem;
  }

  :global(.cm-scroller) {
    overflow: auto;
  }

  :global(.cm-scroller::-webkit-scrollbar-thumb) {
    background-color: #333;
  }

  :global(.cm-content) {
    padding: var(--spacing-sm);
    caret-color: var(--color-accent);
    line-height: 1.6;
  }

  :global(.cm-line) {
    padding: 0 0.5rem;
  }

  :global(.cm-cursor) {
    border-left: 2px solid var(--color-accent);
  }

  :global(.cm-selectionBackground) {
    background-color: rgba(46, 196, 46, 0.25) !important;
  }

  :global(.cm-focused .cm-selectionBackground) {
    background-color: rgba(46, 196, 46, 0.25) !important;
  }

  :global(.cm-gutters) {
    background-color: var(--color-til-bg);
    border-right: 1px solid var(--color-border);
    color: #7c7c7c;
  }

  :global(.cm-activeLineGutter) {
    background-color: rgba(46, 196, 46, 0.09);
    color: var(--color-accent);
  }

  :global(.cm-activeLine) {
    background-color: rgba(46, 196, 46, 0.05);
  }

  :global(.cm-vim-panel) {
    display: none;
  }
</style>

<script>
  import { EditorView } from 'codemirror';
  import { basicSetup } from 'codemirror';
  import { EditorState } from '@codemirror/state';
  import { vim, Vim } from '@replit/codemirror-vim';
  import { markdown } from '@codemirror/lang-markdown';
  import { javascript } from '@codemirror/lang-javascript';
  import { python } from '@codemirror/lang-python';

  let editorView: EditorView;
  let currentLanguage: any = null;

  const vimModeElement = document.getElementById('vim-mode');
  const vimCommandElement = document.getElementById('vim-command');
  const cursorPosElement = document.getElementById('cursor-pos');
  const settingsPanel = document.getElementById('settings-panel');

  const defaultText = `Welcome to vim editor

This is a minimal vim editor running in your browser.

Basic vim commands:
- i: insert mode
- Esc: normal mode
- :w: save to localStorage
- :q: clear (no quit, you're in a browser!)
- yy: yank (copy) line
- p: paste
- dd: delete line
- u: undo
- Ctrl-r: redo

Visual modes:
- v: visual mode (character)
- V: visual line mode
- Ctrl-q: visual block mode (Ctrl-v is captured by browser)

Use the buttons above or vim commands.
Start typing to replace this text.
`;

  function createEditor() {
    const container = document.getElementById('editor-container');
    if (!container) return;

    const tabSize = parseInt((document.getElementById('tab-size') as HTMLInputElement)?.value || '2');
    const showLineNumbers = (document.getElementById('line-numbers') as HTMLInputElement)?.checked;
    const syntaxLang = (document.getElementById('syntax-lang') as HTMLSelectElement)?.value;

    let languageExtension: any[] = [];
    if (syntaxLang === 'markdown') {
      languageExtension = [markdown()];
    } else if (syntaxLang === 'javascript') {
      languageExtension = [javascript()];
    } else if (syntaxLang === 'python') {
      languageExtension = [python()];
    }

    const savedContent = localStorage.getItem('vim-editor-content') || defaultText;

    const startState = EditorState.create({
      doc: savedContent,
      extensions: [
        basicSetup,
        vim(),
        ...languageExtension,
        EditorView.updateListener.of((update) => {
          if (update.selectionSet) {
            const pos = update.state.selection.main.head;
            const line = update.state.doc.lineAt(pos);
            const col = pos - line.from + 1;
            if (cursorPosElement) {
              cursorPosElement.textContent = `${line.number}:${col}`;
            }
          }
        }),
        EditorView.theme({
          '&': {
            height: '100%',
            backgroundColor: 'var(--color-pre-bg)',
          },
          '.cm-scroller': {
            fontFamily: 'var(--font-mono)',
            fontSize: '1rem',
            lineHeight: '1.6',
          },
          '.cm-gutters': {
            backgroundColor: 'var(--color-til-bg)',
            borderRight: '1px solid var(--color-border)',
            color: '#7c7c7c',
          },
        }),
      ],
    });

    if (editorView) {
      editorView.destroy();
    }

    editorView = new EditorView({
      state: startState,
      parent: container,
    });

    Vim.defineEx('write', 'w', () => {
      saveToLocalStorage();
    });

    Vim.defineEx('quit', 'q', () => {
      clearEditor();
    });

    Vim.defineEx('wq', 'wq', () => {
      saveToLocalStorage();
      clearEditor();
    });

    updateVimStatus();
    editorView.focus();
  }

  function updateVimStatus() {
    if (!editorView) return;

    const vimState = (editorView as any).state.vim;
    if (vimState && vimModeElement) {
      const mode = vimState.mode.toUpperCase();
      vimModeElement.textContent = mode;
    }
  }

  setInterval(updateVimStatus, 100);

  function saveToLocalStorage() {
    if (!editorView) return;
    const content = editorView.state.doc.toString();
    localStorage.setItem('vim-editor-content', content);
    (window as any).showNotification?.('saved to localStorage');
  }

  function loadFromLocalStorage() {
    const content = localStorage.getItem('vim-editor-content');
    if (content && editorView) {
      editorView.dispatch({
        changes: {
          from: 0,
          to: editorView.state.doc.length,
          insert: content,
        },
      });
      (window as any).showNotification?.('loaded from localStorage');
    }
  }

  function clearEditor() {
    if (!editorView) return;
    editorView.dispatch({
      changes: {
        from: 0,
        to: editorView.state.doc.length,
        insert: '',
      },
    });
    (window as any).showNotification?.('editor cleared');
  }

  function copyToClipboard() {
    if (!editorView) return;
    const content = editorView.state.doc.toString();
    navigator.clipboard.writeText(content).then(() => {
      (window as any).showNotification?.('copied to clipboard');
    }).catch(err => {
      console.error('Failed to copy:', err);
    });
  }

  document.getElementById('save-btn')?.addEventListener('click', saveToLocalStorage);
  document.getElementById('load-btn')?.addEventListener('click', loadFromLocalStorage);
  document.getElementById('clear-btn')?.addEventListener('click', clearEditor);
  document.getElementById('copy-btn')?.addEventListener('click', copyToClipboard);

  document.getElementById('settings-btn')?.addEventListener('click', () => {
    if (settingsPanel) {
      settingsPanel.hidden = !settingsPanel.hidden;
    }
  });

  document.getElementById('tab-size')?.addEventListener('change', () => {
    createEditor();
  });

  document.getElementById('line-numbers')?.addEventListener('change', () => {
    createEditor();
  });

  document.getElementById('syntax-lang')?.addEventListener('change', () => {
    createEditor();
  });

  function isMobileDevice() {
    return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) 
      || (window.matchMedia && window.matchMedia('(max-width: 768px)').matches);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const mobileWarning = document.getElementById('mobile-warning');
    const editorWrapper = document.getElementById('editor-wrapper');

    if (isMobileDevice()) {
      if (mobileWarning) mobileWarning.hidden = false;
      if (editorWrapper) editorWrapper.hidden = true;
    } else {
      createEditor();
    }
  });
</script>
