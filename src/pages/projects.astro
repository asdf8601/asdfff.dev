---
import BaseLayout from '../layouts/BaseLayout.astro';
import PageSearchModal from '../components/PageSearchModal.astro';
---

<BaseLayout title="projects - wtfm">
  <article>
    <h1>projects</h1>

    <p>Things I've built. Some finished, some not.</p>

    <div class="project-grid">
    <div class="project-entry">
      <div class="project-header">
        <h3>ineqpy</h3>
        <div class="project-links">
          <a href="https://github.com/mmngreco/ineqpy" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>Python library for inequality and poverty metrics. Gini, Atkinson, Theil, and more.</p>
      <div class="project-tags">
        <span>python</span>
        <span>economics</span>
        <span>statistics</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>takt-go</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/takt-go" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>Terminal-based time tracking. Simple takt format. Git-like commands.</p>
      <div class="project-tags">
        <span>go</span>
        <span>cli</span>
        <span>time-tracking</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>asdfff.dev</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/asdfff.dev" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>This site. Minimalist terminal aesthetic. Astro + zero dependencies.</p>
      <div class="project-tags">
        <span>astro</span>
        <span>typescript</span>
        <span>css</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>gsx</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/gsx" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>A Python decorator to push data to Google Cloud Platform</p>
      <div class="project-tags">
        <span>python</span>
        <span>gcp</span>
        <span>decorator</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>dex</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/dex" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>Docker image ready for compiling latex files</p>
      <div class="project-tags">
        <span>compiler</span>
        <span>docker</span>
        <span>latex</span>
        <span>pandoc</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>dbee</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/dbee" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>An SqlAlchemy's CLI</p>
      <div class="project-tags">
        <span>cli</span>
        <span>database</span>
        <span>python</span>
        <span>sql</span>
        <span>sqlalchemy</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>trinoq</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/trinoq" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>Python client for Trino queries</p>
      <div class="project-tags">
        <span>python</span>
        <span>trino</span>
        <span>sql</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>deepseek</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/deepseek" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>DeepSeek AI integration</p>
      <div class="project-tags">
        <span>go</span>
        <span>ai</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>druidq</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/druidq" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>Python client for Apache Druid</p>
      <div class="project-tags">
        <span>python</span>
        <span>druid</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>duckgs</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/duckgs" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>DuckDB and Google Sheets integration</p>
      <div class="project-tags">
        <span>python</span>
        <span>duckdb</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>pandas-distinct</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/pandas-distinct" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>WIP: Implementation of multiset difference using pandas objects.</p>
      <div class="project-tags">
        <span>python</span>
        <span>pandas</span>
        <span>wip</span>
      </div>
    </div>

    <div class="project-entry">
      <div class="project-header">
        <h3>pandas-context</h3>
        <div class="project-links">
          <a href="https://github.com/asdf8601/pandas-context" target="_blank" rel="noopener noreferrer">
            <i class="fa-brands fa-github"></i>
          </a>
        </div>
      </div>
      <p>WIP: Give context to an index.</p>
      <div class="project-tags">
        <span>python</span>
        <span>pandas</span>
        <span>wip</span>
      </div>
    </div>

  </div>

  </article>

  <PageSearchModal />
</BaseLayout>

<style>
  h1 {
    margin-bottom: var(--spacing-md);
    text-transform: lowercase;
  }

  .project-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: var(--spacing-lg);
  }

  @media (max-width: 768px) {
    .project-grid {
      grid-template-columns: 1fr;
    }
  }

  .project-entry {
    margin-bottom: 0;
    padding: var(--spacing-sm);
    background-color: var(--color-til-bg);
    transition: all 0.2s ease;
    position: relative;
    border: 1px solid var(--color-border);
    clip-path: var(--clip-path-angled);
  }

  .project-entry::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--angled-corner);
    background-color: var(--color-border);
    transition: background-color 0.2s ease;
  }

  .project-entry::after {
    content: '';
    position: absolute;
    left: var(--angled-corner);
    bottom: 0;
    right: 0;
    height: var(--angled-corner);
    background-color: var(--color-border);
    transition: background-color 0.2s ease;
  }

  .project-entry:hover {
    background-color: var(--color-til-hover);
    border-color: var(--color-accent);
  }

  .project-entry:hover::before,
  .project-entry:hover::after {
    background-color: var(--color-accent);
  }

  .project-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-xs);
  }

  .project-header h3 {
    margin: 0;
    color: var(--color-accent);
  }

  .project-links {
    display: flex;
    gap: var(--spacing-sm);
  }

  .project-links a {
    color: var(--color-text);
    font-size: 1.2rem;
    transition: color 0.2s;
  }

  .project-links a:hover {
    color: var(--color-accent);
  }

  .project-entry p {
    margin-bottom: var(--spacing-sm);
  }

  .project-tags {
    display: flex;
    gap: var(--spacing-xs);
    flex-wrap: wrap;
  }

  .project-tags span {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    border: 1px solid var(--color-border);
    padding: 0.15rem 0.5rem;
    border-radius: 2px;
  }
</style>

<script>
  interface SearchMatch {
    element: Element;
    text: string;
    index: number;
  }

  let pageSearchActive = false;
  let searchMatches: SearchMatch[] = [];
  let searchSelectedIndex = -1;

  const pageSearchModal = document.getElementById('page-search-modal');
  const pageSearchInput = document.getElementById('page-search-input') as HTMLInputElement;
  const pageSearchResults = document.getElementById('page-search-results');

  function searchInPage(query: string) {
    searchMatches = [];
    if (!query) {
      renderPageSearchResults();
      return;
    }

    const article = document.querySelector('article');
    if (!article) return;

    const walker = document.createTreeWalker(
      article,
      NodeFilter.SHOW_TEXT,
      {
        acceptNode: (node) => {
          if (node.parentElement?.tagName === 'SCRIPT' ||
              node.parentElement?.tagName === 'STYLE') {
            return NodeFilter.FILTER_REJECT;
          }
          return NodeFilter.FILTER_ACCEPT;
        }
      }
    );

    let node;
    while ((node = walker.nextNode())) {
      const text = node.textContent || '';
      const lowerText = text.toLowerCase();
      const lowerQuery = query.toLowerCase();

      let index = 0;
      let position;
      while ((position = lowerText.indexOf(lowerQuery, index)) !== -1) {
        searchMatches.push({
          element: node.parentElement as Element,
          text: text,
          index: position
        });
        index = position + 1;
      }
    }

    renderPageSearchResults();
  }

  function renderPageSearchResults() {
    if (!pageSearchResults) return;

    pageSearchResults.innerHTML = '';

    if (searchMatches.length === 0) {
      pageSearchResults.innerHTML = '<div style="padding: var(--spacing-sm); color: var(--color-text-muted);">No matches found</div>';
      return;
    }

    searchMatches.forEach((match, index) => {
      const div = document.createElement('div');
      div.className = 'search-result';
      if (index === searchSelectedIndex) {
        div.classList.add('selected-item');
      }

      const start = Math.max(0, match.index - 40);
      const end = Math.min(match.text.length, match.index + (pageSearchInput?.value.length || 0) + 40);
      const before = match.text.slice(start, match.index);
      const matchText = match.text.slice(match.index, match.index + (pageSearchInput?.value.length || 0));
      const after = match.text.slice(match.index + (pageSearchInput?.value.length || 0), end);

      div.innerHTML = `
        <div class="search-result-text">
          ${start > 0 ? '...' : ''}${before}<span class="search-highlight">${matchText}</span>${after}${end < match.text.length ? '...' : ''}
        </div>
      `;

      div.addEventListener('click', () => {
        match.element.scrollIntoView({ block: 'center', behavior: 'smooth' });
        closePageSearch();
      });

      pageSearchResults.appendChild(div);
    });
  }

  function updatePageSearchSelection() {
    const resultElements = pageSearchResults?.querySelectorAll('.search-result');
    resultElements?.forEach((el, index) => {
      if (index === searchSelectedIndex) {
        el.classList.add('selected-item');
        el.scrollIntoView({ block: 'nearest', behavior: 'smooth' });
      } else {
        el.classList.remove('selected-item');
      }
    });
  }

  function openPageSearch() {
    pageSearchActive = true;
    pageSearchModal?.classList.add('active');
    pageSearchInput?.focus();
    searchSelectedIndex = 0;
    searchInPage('');
  }

  function closePageSearch() {
    pageSearchActive = false;
    pageSearchModal?.classList.remove('active');
    if (pageSearchInput) pageSearchInput.value = '';
    searchSelectedIndex = -1;
    searchMatches = [];
  }

  pageSearchInput?.addEventListener('input', () => {
    searchSelectedIndex = 0;
    searchInPage(pageSearchInput.value);
  });

  document.addEventListener('DOMContentLoaded', () => {
    const projectEntries = document.querySelectorAll('.project-entry');

    projectEntries.forEach(entry => {
      entry.addEventListener('click', (e) => {
        const target = e.target as HTMLElement;
        if (target && target.closest('.project-links a')) {
          return;
        }

        const link = entry.querySelector('.project-links a');
        if (link) {
          const href = link.getAttribute('href');
          if (href) {
            window.open(href, '_blank', 'noopener,noreferrer');
          }
        }
      });

      (entry as HTMLElement).style.cursor = 'pointer';
    });

    const projectEntriesArr = Array.from(projectEntries);
    let selectedIndex = -1;

    function selectItem(index: number) {
      projectEntriesArr.forEach(entry => entry.classList.remove('selected-item'));
      if (index >= 0 && index < projectEntriesArr.length) {
        selectedIndex = index;
        projectEntriesArr[selectedIndex].classList.add('selected-item');
        projectEntriesArr[selectedIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }

    document.addEventListener('keydown', (e) => {
      const target = e.target as HTMLElement;

      if (pageSearchActive) {
        if (target.tagName !== 'INPUT' && target.tagName !== 'TEXTAREA') {
          if (e.key === 'j') {
            e.preventDefault();
            searchSelectedIndex = Math.min(searchSelectedIndex + 1, searchMatches.length - 1);
            updatePageSearchSelection();
          } else if (e.key === 'k') {
            e.preventDefault();
            searchSelectedIndex = Math.max(searchSelectedIndex - 1, 0);
            updatePageSearchSelection();
          } else if (e.key === 'Enter' && searchSelectedIndex >= 0) {
            e.preventDefault();
            const match = searchMatches[searchSelectedIndex];
            if (match) {
              match.element.scrollIntoView({ block: 'center', behavior: 'smooth' });
              closePageSearch();
            }
          }
        }
        if (e.key === 'Escape') {
          e.preventDefault();
          closePageSearch();
        }
        return;
      }

      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
        return;
      }

      if (e.key === 'k' && (e.ctrlKey || e.metaKey)) {
        return;
      }

      if (e.key === '/') {
        e.preventDefault();
        openPageSearch();
        return;
      }

      if (e.key === 'j') {
        e.preventDefault();
        selectItem(selectedIndex + 1);
      } else if (e.key === 'k') {
        e.preventDefault();
        if (selectedIndex > 0) {
          selectItem(selectedIndex - 1);
        }
      } else if (e.key === 'Enter' && selectedIndex >= 0) {
        e.preventDefault();
        const link = projectEntriesArr[selectedIndex].querySelector('.project-links a') as HTMLAnchorElement;
        if (link) {
          const href = link.getAttribute('href');
          if (href) {
            window.open(href, '_blank', 'noopener,noreferrer');
          }
        }
      }
    });
  });
</script>
