---
import BaseLayout from "../layouts/BaseLayout.astro"

const postModules = import.meta.glob("./posts/*.mdx", { eager: true })
const posts = Object.values(postModules) as any[]

const quoteModules = import.meta.glob("./quotes/*.md", { eager: true })
const quotes = Object.values(quoteModules) as any[]

const tilModules = import.meta.glob("./til/*.md", { eager: true })
const tils = Object.values(tilModules) as any[]

const isDev = import.meta.env.DEV

const sortedPosts = posts
  .filter((post: any) => isDev || !post.frontmatter.draft)
  .sort((a: any, b: any) => {
    const dateA = new Date(a.frontmatter.date || 0)
    const dateB = new Date(b.frontmatter.date || 0)
    return dateB.getTime() - dateA.getTime()
  })
  .slice(0, 10)

const contentData = await Promise.all([
  ...quotes.map(async (q: any) => ({
    type: "quote",
    html: await q.compiledContent(),
    author: q.frontmatter.author,
    source: q.frontmatter.source,
  })),
  ...tils.map(async (t: any) => ({
    type: "til",
    html: await t.compiledContent(),
  })),
])

function formatDate(dateStr: string): string {
  const date = new Date(dateStr)
  return date.toLocaleDateString("en-US", {
    year: "numeric",
    month: "short",
    day: "numeric",
  })
}
---

<BaseLayout title="Write the Fucking Manual">
  <article>
    <h1>wtfm</h1>

    <p>Like planting a tree, the best time was 30 years ago. The second best time is right now.</p>

    <p>I've always wanted to write this stuff down somewhere. This site is basically that.</p>

    <section class="random-content" id="random-content"></section>

    {
      sortedPosts.length > 0 && (
        <section class="recent-posts">
          <h2>recent posts</h2>
          <div class="post-list">
            {sortedPosts.map((post: any) => (
              <div class="post-entry">
                <h3>
                  <a href={post.url}>{post.frontmatter.title}</a>
                </h3>
                <time>{formatDate(post.frontmatter.date)}</time>
                {post.frontmatter.description && <p>{post.frontmatter.description}</p>}
              </div>
            ))}
          </div>
          <a href="/posts/" class="read-more">
            read more →
          </a>
        </section>
      )
    }
  </article>
</BaseLayout>

<style>
  h1 {
    margin-bottom: var(--spacing-md);
    text-transform: lowercase;
  }

  h2 {
    text-transform: lowercase;
    text-align: center;
    margin-top: calc(var(--spacing-xl) * 0.75);
    margin-bottom: var(--spacing-lg);
    font-size: 0.9rem;
    font-weight: 700;
    color: var(--color-text);
  }

  strong {
    color: var(--color-accent);
    font-weight: 700;
  }

  .recent-posts {
    margin-top: var(--spacing-sm);
    padding-top: var(--spacing-sm);
    border-top: 1px solid var(--color-border);
  }

  .post-list {
    display: flex;
    flex-direction: column;
    gap: var(--spacing-md);
    margin-bottom: var(--spacing-md);
  }

  .post-entry {
    padding-bottom: var(--spacing-sm);
  }

  .post-entry h3 {
    margin: 0 0 var(--spacing-xs) 0;
    font-size: 1.1rem;
    font-weight: 600;
  }

  .post-entry h3 a {
    text-decoration: none;
  }

  .post-entry h3 a:hover {
    text-decoration: underline;
  }

  .post-entry time {
    display: block;
    color: var(--color-text-muted);
    font-size: 0.85rem;
    margin-bottom: var(--spacing-xs);
  }

  .post-entry p {
    margin: 0;
    color: var(--color-text);
    font-size: 0.95rem;
  }

  .read-more {
    display: inline-block;
    color: var(--color-accent);
    text-decoration: none;
    font-weight: 600;
  }

  .read-more:hover {
    text-decoration: underline;
  }

  .random-content {
    margin: var(--spacing-lg) 0;
    padding: var(--spacing-md) 0;
    border-top: 1px solid var(--color-border);
    border-bottom: 1px solid var(--color-border);
  }

  .quote-box,
  .til-box {
    background-color: var(--color-til-bg);
    border-left: 3px solid var(--color-accent);
    padding: var(--spacing-md);
    position: relative;
  }

  .content-label {
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--color-accent);
    font-weight: 700;
    margin-bottom: var(--spacing-xs);
  }

  .content-body {
    margin: var(--spacing-sm) 0;
    font-size: 0.95rem;
    line-height: 1.6;
  }

  .content-body :global(p) {
    margin: 0;
  }

  .content-body :global(code) {
    background-color: var(--color-bg);
    padding: 0.125rem 0.25rem;
    border-radius: 2px;
    font-size: 0.9em;
  }

  .content-body :global(pre) {
    background-color: var(--color-bg);
    padding: var(--spacing-sm);
    border-radius: 2px;
    overflow-x: auto;
    margin: var(--spacing-xs) 0;
  }

  .quote-meta {
    margin-top: var(--spacing-sm);
    font-style: italic;
    color: var(--color-text-muted);
    font-size: 0.9rem;
  }

  .content-link {
    display: inline-block;
    margin-top: var(--spacing-sm);
    color: var(--color-accent);
    text-decoration: none;
    font-size: 0.85rem;
    font-weight: 600;
  }

  .content-link:hover {
    text-decoration: underline;
  }

  .random-content.hidden {
    display: none;
  }
</style>

<script define:vars={{ contentData }}>
  document.addEventListener("DOMContentLoaded", () => {
    const container = document.getElementById("random-content")
    if (!container || contentData.length === 0) return

    const randomItem = contentData[Math.floor(Math.random() * contentData.length)]
    const isQuote = randomItem.type === "quote"

    const boxClass = isQuote ? "quote-box" : "til-box"
    const label = isQuote ? "quote" : "til"
    const linkText = isQuote ? "quotes" : "tils"
    const linkHref = isQuote ? "/quotes/" : "/til/"

    let metaHtml = ""
    if (isQuote && randomItem.author) {
      metaHtml = `<div class="quote-meta">— ${randomItem.author}${randomItem.source ? `, ${randomItem.source}` : ""}</div>`
    }

    container.innerHTML = `
      <div class="${boxClass}">
        <div class="content-label">${label}</div>
        <div class="content-body">${randomItem.html}</div>
        ${metaHtml}
        <a href="${linkHref}" class="content-link">see more ${linkText} →</a>
      </div>
    `
  })
</script>
