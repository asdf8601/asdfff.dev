---
import BaseLayout from '../layouts/BaseLayout.astro';
import PageSearchModal from '../components/PageSearchModal.astro';

const tils = await Astro.glob('./til/*.md');

const sortedTils = tils.sort((a, b) => {
  const dateA = new Date(a.frontmatter.date || 0);
  const dateB = new Date(b.frontmatter.date || 0);
  return dateB.getTime() - dateA.getTime();
});
---

<BaseLayout title="til - wtfm">
  <article>
    <h1>til</h1>

    <p>Today I learned. Short notes. No fluff.</p>

    {sortedTils.length > 0 ? (
      sortedTils.map((til, index) => {
        const tilNumber = sortedTils.length - index;
        const date = new Date(til.frontmatter.date);
        const formattedDate = date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
        return (
          <div class="til-entry" id={`til-${tilNumber}`}>
            <div class="til-header">
              <div class="til-number-date">
                <span class="til-number">#{tilNumber}</span>
                <time>{formattedDate}</time>
              </div>
              <a href={`#til-${tilNumber}`} class="til-link" aria-label="Link to this TIL"><i class="fa-solid fa-link"></i></a>
            </div>
            <til.Content />
          </div>
        );
      })
    ) : (
      <p class="empty-state">No TILs yet. Add markdown files to src/pages/til/</p>
    )}
  </article>

  <PageSearchModal />
</BaseLayout>

<style>
  article {
    max-width: 100%;
  }

  h1 {
    margin-bottom: var(--spacing-md);
    text-transform: lowercase;
  }

  .til-entry {
    margin-bottom: var(--spacing-lg);
    padding: var(--spacing-sm);
    background-color: var(--color-til-bg);
    scroll-margin-top: var(--spacing-md);
    transition: all 0.2s ease;
    position: relative;
    border: 1px solid var(--color-border);
    clip-path: var(--clip-path-angled);
  }

  .til-entry::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: var(--angled-corner);
    background-color: var(--color-border);
    transition: background-color 0.2s ease;
  }

  .til-entry::after {
    content: '';
    position: absolute;
    left: var(--angled-corner);
    bottom: 0;
    right: 0;
    height: var(--angled-corner);
    background-color: var(--color-border);
    transition: background-color 0.2s ease;
  }

  .til-entry:target::before,
  .til-entry:target::after {
    background-color: var(--color-accent);
  }

  .til-entry:target {
    background-color: var(--color-til-hover);
    border-color: var(--color-accent);
  }

  .til-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: var(--spacing-xs);
  }

  .til-number-date {
    display: flex;
    gap: var(--spacing-xs);
    align-items: center;
  }

  .til-number {
    color: var(--color-accent);
    font-size: 0.85rem;
    font-weight: 600;
  }

  .til-entry time {
    color: var(--color-text-muted);
    font-size: 0.85rem;
  }

  .til-link {
    opacity: 0;
    transition: opacity 0.2s;
    font-size: 0.85rem;
    padding: 0 0.5rem;
  }

  .til-entry:hover .til-link,
  .til-link:focus {
    opacity: 1;
  }

  .til-entry p {
    margin-bottom: 0;
  }

  .til-entry:hover {
    background-color: var(--color-til-hover);
    border-color: var(--color-accent);
  }

  .til-entry:hover::before,
  .til-entry:hover::after {
    background-color: var(--color-accent);
  }
</style>

<script>
  const { openPageSearch, closePageSearch, isPageSearchActive } = (window as any).pageSearchHandlers;

  document.addEventListener('DOMContentLoaded', () => {
    const tilLinks = document.querySelectorAll('.til-link');

    tilLinks.forEach(link => {
      link.addEventListener('click', async (e) => {
        e.preventDefault();
        const href = link.getAttribute('href');

        if (href) {
          const fullUrl = window.location.origin + window.location.pathname + href;

          try {
            await navigator.clipboard.writeText(fullUrl);
            (window as any).showNotification?.('link copied');
          } catch (err) {
            console.error('Failed to copy link:', err);
          }
        }
      });
    });

    const tilEntries = Array.from(document.querySelectorAll('.til-entry'));
    let selectedIndex = -1;

    function selectItem(index: number) {
      tilEntries.forEach(entry => entry.classList.remove('selected-item'));
      if (index >= 0 && index < tilEntries.length) {
        selectedIndex = index;
        tilEntries[selectedIndex].classList.add('selected-item');
        tilEntries[selectedIndex].scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }

    document.addEventListener('keydown', (e) => {
      const target = e.target as HTMLElement;

      if (isPageSearchActive()) {
        return;
      }

      if (target.tagName === 'INPUT' || target.tagName === 'TEXTAREA') {
        return;
      }

      if (e.key === 'k' && (e.ctrlKey || e.metaKey)) {
        return;
      }

      if (e.key === '/') {
        e.preventDefault();
        openPageSearch();
        return;
      }

      if (e.key === 'j') {
        e.preventDefault();
        selectItem(selectedIndex + 1);
      } else if (e.key === 'k') {
        e.preventDefault();
        if (selectedIndex > 0) {
          selectItem(selectedIndex - 1);
        }
      } else if (e.key === 'Enter' && selectedIndex >= 0) {
        e.preventDefault();
        const link = tilEntries[selectedIndex].querySelector('.til-link') as HTMLAnchorElement;
        if (link) {
          link.click();
        }
      }
    });
  });
</script>
