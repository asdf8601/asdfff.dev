name: Process Content Issues

on:
  issue_comment:
    types: [created]

jobs:
  process-issues:
    runs-on: ubuntu-latest
    if: github.event.issue.user.login == 'asdf8601' && github.event.comment.user.login == 'asdf8601'
    permissions:
      contents: write
      issues: write
      actions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Process command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim();
            const issue = context.payload.issue;
            
            const commandMatch = comment.match(/^\/mkdir\s+([\w\/\-\.]+)$/);
            
            if (!commandMatch) {
              console.log('Not a valid command, ignoring');
              return;
            }
            
            const [, filePath] = commandMatch;
            
            if (!filePath.startsWith('src/pages/')) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '❌ File path must start with `src/pages/`'
              });
              return;
            }
            
            console.log(`Processing /mkdir ${filePath}`);
            
            const parseIssueBody = (body) => {
              const contentMatch = body.match(/### Content[^\n]*\n\n([\s\S]*)/);
              if (contentMatch) {
                return contentMatch[1].trim();
              }
              return body;
            };
            
            const content = parseIssueBody(issue.body);
            
            if (!content) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '❌ No content found in issue body'
              });
              return;
            }
            
            console.log(`Creating file: ${filePath}`);
            
            const fs = require('fs');
            const path = require('path');
            
            const fileDir = path.dirname(filePath);
            if (!fs.existsSync(fileDir)) {
              fs.mkdirSync(fileDir, { recursive: true });
            }
            
            fs.writeFileSync(filePath, content);
            console.log(`File written successfully`);
            
            await exec.exec('git', ['config', 'user.name', 'github-actions[bot]']);
            await exec.exec('git', ['config', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
            await exec.exec('git', ['add', filePath]);
            
            try {
              const fileName = path.basename(filePath, path.extname(filePath));
              await exec.exec('git', ['commit', '-m', `add content: ${fileName}`]);
              await exec.exec('git', ['push']);
              console.log('Changes committed and pushed');
              
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy.yml',
                ref: 'main'
              });
              console.log('Deployment workflow triggered');
              
              const urlPath = filePath
                .replace('src/pages/', '')
                .replace(/\.(mdx?|astro)$/, '');
              const contentUrl = `https://blog.asdfff.dev/${urlPath}`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ Content created successfully at \`${filePath}\`\n\nThe site will rebuild automatically.\n\nView it at: ${contentUrl}`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            } catch (error) {
              console.error('Failed to commit or push:', error.message);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `❌ Failed to create content: ${error.message}`
              });
            }
