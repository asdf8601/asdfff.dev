name: Process Content Issues

on:
  issue_comment:
    types: [created]

jobs:
  process-issues:
    runs-on: ubuntu-latest
    if: github.event.issue.user.login == 'asdf8601' && github.event.comment.user.login == 'asdf8601'
    permissions:
      contents: write
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Process command
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim();
            const issue = context.payload.issue;
            
            const commandMatch = comment.match(/^\/(post|til|quote)\s+([a-z0-9-]+)$/);
            
            if (!commandMatch) {
              console.log('Not a valid command, ignoring');
              return;
            }
            
            const [, contentType, filename] = commandMatch;
            const labels = issue.labels.map(l => l.name);
            
            if (!labels.includes(contentType)) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `❌ Issue must have the \`${contentType}\` label to use \`/${contentType}\` command`
              });
              return;
            }
            
            console.log(`Processing /${contentType} ${filename}`);
            
            const parseIssueBody = (body) => {
              const contentMatch = body.match(/### (?:Post Content|TIL Content|Quote Content)[^\n]*\n\n([\s\S]*)/);
              if (contentMatch) {
                return contentMatch[1].trim();
              }
              return body;
            };
            
            const content = parseIssueBody(issue.body);
            
            if (!content) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: '❌ No content found in issue body'
              });
              return;
            }
            
            const extensionMap = {
              'post': 'mdx',
              'til': 'md',
              'quote': 'md'
            };
            
            const dirMap = {
              'post': 'posts',
              'til': 'til',
              'quote': 'quotes'
            };
            
            const ext = extensionMap[contentType];
            const dir = dirMap[contentType];
            const filePath = `src/pages/${dir}/${filename}.${ext}`;
            
            console.log(`Creating file: ${filePath}`);
            
            const fs = require('fs');
            const path = require('path');
            
            const fileDir = path.dirname(filePath);
            if (!fs.existsSync(fileDir)) {
              fs.mkdirSync(fileDir, { recursive: true });
            }
            
            fs.writeFileSync(filePath, content);
            console.log(`File written successfully`);
            
            await exec.exec('git', ['config', 'user.name', 'github-actions[bot]']);
            await exec.exec('git', ['config', 'user.email', 'github-actions[bot]@users.noreply.github.com']);
            await exec.exec('git', ['add', filePath]);
            
            try {
              await exec.exec('git', ['commit', '-m', `add ${contentType}: ${filename}`]);
              await exec.exec('git', ['push']);
              console.log('Changes committed and pushed');
              
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy.yml',
                ref: 'main'
              });
              console.log('Deployment workflow triggered');
              
              const urlMap = {
                'post': `https://blog.asdfff.dev/posts/${filename}`,
                'til': `https://blog.asdfff.dev/til/${filename}`,
                'quote': `https://blog.asdfff.dev/quotes/${filename}`
              };
              
              const contentUrl = urlMap[contentType];
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ Content created successfully at \`${filePath}\`\n\nThe site will rebuild automatically.\n\nView it at: ${contentUrl}`
              });
              
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
            } catch (error) {
              console.error('Failed to commit or push:', error.message);
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `❌ Failed to create content: ${error.message}`
              });
            }
